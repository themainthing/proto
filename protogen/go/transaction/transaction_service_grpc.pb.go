// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: proto/transaction/transaction_service.proto

package transaction

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransactionHandlerClient is the client API for TransactionHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionHandlerClient interface {
	SummarizeTransaction(ctx context.Context, opts ...grpc.CallOption) (TransactionHandler_SummarizeTransactionClient, error)
}

type transactionHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionHandlerClient(cc grpc.ClientConnInterface) TransactionHandlerClient {
	return &transactionHandlerClient{cc}
}

func (c *transactionHandlerClient) SummarizeTransaction(ctx context.Context, opts ...grpc.CallOption) (TransactionHandler_SummarizeTransactionClient, error) {
	stream, err := c.cc.NewStream(ctx, &TransactionHandler_ServiceDesc.Streams[0], "/transaction.TransactionHandler/SummarizeTransaction", opts...)
	if err != nil {
		return nil, err
	}
	x := &transactionHandlerSummarizeTransactionClient{stream}
	return x, nil
}

type TransactionHandler_SummarizeTransactionClient interface {
	Send(*Transaction) error
	CloseAndRecv() (*TransactionResponse, error)
	grpc.ClientStream
}

type transactionHandlerSummarizeTransactionClient struct {
	grpc.ClientStream
}

func (x *transactionHandlerSummarizeTransactionClient) Send(m *Transaction) error {
	return x.ClientStream.SendMsg(m)
}

func (x *transactionHandlerSummarizeTransactionClient) CloseAndRecv() (*TransactionResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TransactionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TransactionHandlerServer is the server API for TransactionHandler service.
// All implementations must embed UnimplementedTransactionHandlerServer
// for forward compatibility
type TransactionHandlerServer interface {
	SummarizeTransaction(TransactionHandler_SummarizeTransactionServer) error
	mustEmbedUnimplementedTransactionHandlerServer()
}

// UnimplementedTransactionHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedTransactionHandlerServer struct {
}

func (UnimplementedTransactionHandlerServer) SummarizeTransaction(TransactionHandler_SummarizeTransactionServer) error {
	return status.Errorf(codes.Unimplemented, "method SummarizeTransaction not implemented")
}
func (UnimplementedTransactionHandlerServer) mustEmbedUnimplementedTransactionHandlerServer() {}

// UnsafeTransactionHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionHandlerServer will
// result in compilation errors.
type UnsafeTransactionHandlerServer interface {
	mustEmbedUnimplementedTransactionHandlerServer()
}

func RegisterTransactionHandlerServer(s grpc.ServiceRegistrar, srv TransactionHandlerServer) {
	s.RegisterService(&TransactionHandler_ServiceDesc, srv)
}

func _TransactionHandler_SummarizeTransaction_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransactionHandlerServer).SummarizeTransaction(&transactionHandlerSummarizeTransactionServer{stream})
}

type TransactionHandler_SummarizeTransactionServer interface {
	SendAndClose(*TransactionResponse) error
	Recv() (*Transaction, error)
	grpc.ServerStream
}

type transactionHandlerSummarizeTransactionServer struct {
	grpc.ServerStream
}

func (x *transactionHandlerSummarizeTransactionServer) SendAndClose(m *TransactionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *transactionHandlerSummarizeTransactionServer) Recv() (*Transaction, error) {
	m := new(Transaction)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TransactionHandler_ServiceDesc is the grpc.ServiceDesc for TransactionHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transaction.TransactionHandler",
	HandlerType: (*TransactionHandlerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SummarizeTransaction",
			Handler:       _TransactionHandler_SummarizeTransaction_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/transaction/transaction_service.proto",
}
