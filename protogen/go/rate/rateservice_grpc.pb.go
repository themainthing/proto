// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: proto/rate/rateservice.proto

package rate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RateHandlerClient is the client API for RateHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RateHandlerClient interface {
	FetchExchangeRates(ctx context.Context, in *RateRequest, opts ...grpc.CallOption) (RateHandler_FetchExchangeRatesClient, error)
}

type rateHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewRateHandlerClient(cc grpc.ClientConnInterface) RateHandlerClient {
	return &rateHandlerClient{cc}
}

func (c *rateHandlerClient) FetchExchangeRates(ctx context.Context, in *RateRequest, opts ...grpc.CallOption) (RateHandler_FetchExchangeRatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &RateHandler_ServiceDesc.Streams[0], "/rate.RateHandler/FetchExchangeRates", opts...)
	if err != nil {
		return nil, err
	}
	x := &rateHandlerFetchExchangeRatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RateHandler_FetchExchangeRatesClient interface {
	Recv() (*RateResponse, error)
	grpc.ClientStream
}

type rateHandlerFetchExchangeRatesClient struct {
	grpc.ClientStream
}

func (x *rateHandlerFetchExchangeRatesClient) Recv() (*RateResponse, error) {
	m := new(RateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RateHandlerServer is the server API for RateHandler service.
// All implementations must embed UnimplementedRateHandlerServer
// for forward compatibility
type RateHandlerServer interface {
	FetchExchangeRates(*RateRequest, RateHandler_FetchExchangeRatesServer) error
	mustEmbedUnimplementedRateHandlerServer()
}

// UnimplementedRateHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedRateHandlerServer struct {
}

func (UnimplementedRateHandlerServer) FetchExchangeRates(*RateRequest, RateHandler_FetchExchangeRatesServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchExchangeRates not implemented")
}
func (UnimplementedRateHandlerServer) mustEmbedUnimplementedRateHandlerServer() {}

// UnsafeRateHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RateHandlerServer will
// result in compilation errors.
type UnsafeRateHandlerServer interface {
	mustEmbedUnimplementedRateHandlerServer()
}

func RegisterRateHandlerServer(s grpc.ServiceRegistrar, srv RateHandlerServer) {
	s.RegisterService(&RateHandler_ServiceDesc, srv)
}

func _RateHandler_FetchExchangeRates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RateHandlerServer).FetchExchangeRates(m, &rateHandlerFetchExchangeRatesServer{stream})
}

type RateHandler_FetchExchangeRatesServer interface {
	Send(*RateResponse) error
	grpc.ServerStream
}

type rateHandlerFetchExchangeRatesServer struct {
	grpc.ServerStream
}

func (x *rateHandlerFetchExchangeRatesServer) Send(m *RateResponse) error {
	return x.ServerStream.SendMsg(m)
}

// RateHandler_ServiceDesc is the grpc.ServiceDesc for RateHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RateHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rate.RateHandler",
	HandlerType: (*RateHandlerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchExchangeRates",
			Handler:       _RateHandler_FetchExchangeRates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/rate/rateservice.proto",
}
