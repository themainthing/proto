// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: proto/hello/hello.proto

package hello

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HelloHandlerClient is the client API for HelloHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloHandlerClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	SayManyHellos(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (HelloHandler_SayManyHellosClient, error)
	SayManyNames(ctx context.Context, opts ...grpc.CallOption) (HelloHandler_SayManyNamesClient, error)
	BidirectionalHello(ctx context.Context, opts ...grpc.CallOption) (HelloHandler_BidirectionalHelloClient, error)
}

type helloHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloHandlerClient(cc grpc.ClientConnInterface) HelloHandlerClient {
	return &helloHandlerClient{cc}
}

func (c *helloHandlerClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/hello.HelloHandler/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloHandlerClient) SayManyHellos(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (HelloHandler_SayManyHellosClient, error) {
	stream, err := c.cc.NewStream(ctx, &HelloHandler_ServiceDesc.Streams[0], "/hello.HelloHandler/SayManyHellos", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloHandlerSayManyHellosClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HelloHandler_SayManyHellosClient interface {
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type helloHandlerSayManyHellosClient struct {
	grpc.ClientStream
}

func (x *helloHandlerSayManyHellosClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloHandlerClient) SayManyNames(ctx context.Context, opts ...grpc.CallOption) (HelloHandler_SayManyNamesClient, error) {
	stream, err := c.cc.NewStream(ctx, &HelloHandler_ServiceDesc.Streams[1], "/hello.HelloHandler/SayManyNames", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloHandlerSayManyNamesClient{stream}
	return x, nil
}

type HelloHandler_SayManyNamesClient interface {
	Send(*HelloRequest) error
	CloseAndRecv() (*HelloResponse, error)
	grpc.ClientStream
}

type helloHandlerSayManyNamesClient struct {
	grpc.ClientStream
}

func (x *helloHandlerSayManyNamesClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloHandlerSayManyNamesClient) CloseAndRecv() (*HelloResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloHandlerClient) BidirectionalHello(ctx context.Context, opts ...grpc.CallOption) (HelloHandler_BidirectionalHelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &HelloHandler_ServiceDesc.Streams[2], "/hello.HelloHandler/BidirectionalHello", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloHandlerBidirectionalHelloClient{stream}
	return x, nil
}

type HelloHandler_BidirectionalHelloClient interface {
	Send(*HelloRequest) error
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type helloHandlerBidirectionalHelloClient struct {
	grpc.ClientStream
}

func (x *helloHandlerBidirectionalHelloClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloHandlerBidirectionalHelloClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloHandlerServer is the server API for HelloHandler service.
// All implementations must embed UnimplementedHelloHandlerServer
// for forward compatibility
type HelloHandlerServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloResponse, error)
	SayManyHellos(*HelloRequest, HelloHandler_SayManyHellosServer) error
	SayManyNames(HelloHandler_SayManyNamesServer) error
	BidirectionalHello(HelloHandler_BidirectionalHelloServer) error
	mustEmbedUnimplementedHelloHandlerServer()
}

// UnimplementedHelloHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedHelloHandlerServer struct {
}

func (UnimplementedHelloHandlerServer) SayHello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedHelloHandlerServer) SayManyHellos(*HelloRequest, HelloHandler_SayManyHellosServer) error {
	return status.Errorf(codes.Unimplemented, "method SayManyHellos not implemented")
}
func (UnimplementedHelloHandlerServer) SayManyNames(HelloHandler_SayManyNamesServer) error {
	return status.Errorf(codes.Unimplemented, "method SayManyNames not implemented")
}
func (UnimplementedHelloHandlerServer) BidirectionalHello(HelloHandler_BidirectionalHelloServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalHello not implemented")
}
func (UnimplementedHelloHandlerServer) mustEmbedUnimplementedHelloHandlerServer() {}

// UnsafeHelloHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloHandlerServer will
// result in compilation errors.
type UnsafeHelloHandlerServer interface {
	mustEmbedUnimplementedHelloHandlerServer()
}

func RegisterHelloHandlerServer(s grpc.ServiceRegistrar, srv HelloHandlerServer) {
	s.RegisterService(&HelloHandler_ServiceDesc, srv)
}

func _HelloHandler_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloHandlerServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello.HelloHandler/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloHandlerServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloHandler_SayManyHellos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelloHandlerServer).SayManyHellos(m, &helloHandlerSayManyHellosServer{stream})
}

type HelloHandler_SayManyHellosServer interface {
	Send(*HelloResponse) error
	grpc.ServerStream
}

type helloHandlerSayManyHellosServer struct {
	grpc.ServerStream
}

func (x *helloHandlerSayManyHellosServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HelloHandler_SayManyNames_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloHandlerServer).SayManyNames(&helloHandlerSayManyNamesServer{stream})
}

type HelloHandler_SayManyNamesServer interface {
	SendAndClose(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type helloHandlerSayManyNamesServer struct {
	grpc.ServerStream
}

func (x *helloHandlerSayManyNamesServer) SendAndClose(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloHandlerSayManyNamesServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HelloHandler_BidirectionalHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloHandlerServer).BidirectionalHello(&helloHandlerBidirectionalHelloServer{stream})
}

type HelloHandler_BidirectionalHelloServer interface {
	Send(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type helloHandlerBidirectionalHelloServer struct {
	grpc.ServerStream
}

func (x *helloHandlerBidirectionalHelloServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloHandlerBidirectionalHelloServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloHandler_ServiceDesc is the grpc.ServiceDesc for HelloHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelloHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hello.HelloHandler",
	HandlerType: (*HelloHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _HelloHandler_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayManyHellos",
			Handler:       _HelloHandler_SayManyHellos_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SayManyNames",
			Handler:       _HelloHandler_SayManyNames_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidirectionalHello",
			Handler:       _HelloHandler_BidirectionalHello_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/hello/hello.proto",
}
